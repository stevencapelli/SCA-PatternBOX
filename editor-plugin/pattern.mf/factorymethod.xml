<?xml version="1.0" encoding="iso-8859-1" ?>
<!DOCTYPE pattern SYSTEM "manifest.dtd">
<pattern id="factorymethod"
         name="Factory Method"
         topCategorie="GoF"
         subCategorie="Creational Pattern">

  <comment>
    Define an interface for creating an object, but let subclasses decide which class
    to instantiate. Factory Method lets a class defer instantiation to subclasses.
  </comment>

  <!-- ====================================================================== -->
  <role name="Product" min="1" max="1">
    <comment>
      <li>defines the interface of objects the factory method creates.</li>
    </comment>
  </role>

  <!-- ====================================================================== -->
  <role name="ConcreteProduct" min="1" max="1">
    <comment>
      <li>implements the Product interface.</li>
    </comment>
    <dependence roles="Product" />
  </role>

  <!-- ====================================================================== -->
  <role name="Creator" min="1" max="1">
    <comment>
      <li>declares the factory method, which returns an object of type Product. Creator may also define a default implementation of the factory method that returns a default ConcreteProduct object.</li>
      <li>may call the factory method to create a Product object.</li>
    </comment>
  </role>

  <!-- ====================================================================== -->
  <role name="ConcreteCreator" min="1" max="1">
    <comment>
      <li>overrides the factory method to return an instance of a ConcreteProduct.</li>
    </comment>
    <dependence roles="Creator ConcreteProduct" />
  </role>

</pattern>
