<?xml version="1.0" encoding="iso-8859-1" ?>
<!DOCTYPE pattern SYSTEM "manifest.dtd">
<pattern id="composite"
         name="Composite"
         topCategorie="GoF"
         subCategorie="Structural Pattern">

  <comment>
    Compose objects into tree structures to represent part-whole hierarchies. Composite
    lets clients treat individual objects and compositions of objects uniformly.
  </comment>

  <!-- ====================================================================== -->
  <role name="Component" min="1" max="1">
    <comment>
      <li>declares the interface for objects in the composition.</li>
      <li>implements default behavior for the interface common to all classes, as appropriate.</li>
      <li>declares an interface for accessing and managing its child components.</li>
      <li>(optional) defines an interface for accessing a component's parent in the recursive structure, and implements it if that's appropriate.</li>
    </comment>
  </role>

  <!-- ====================================================================== -->
  <role name="Leaf" min="1" max="n">
    <comment>
      <li>represents leaf objects in the composition. A leaf has no children.</li>
      <li>defines behavior for primitive objects in the composition.</li>
    </comment>
    <dependence roles="Component" />
  </role>

  <!-- ====================================================================== -->
  <role name="Composite" min="1" max="1">
    <comment>
      <li>defines behavior for components having children.</li>
      <li>stores child components.</li>
      <li>implements child-related operations in the Component interface.</li>
    </comment>
    <dependence roles="Component" />
  </role>

  <!-- ====================================================================== -->
  <role name="Client" min="1" max="1">
    <comment>
      <li>manipulates objects in the composition through the Component interface.</li>
    </comment>
    <dependence roles="Component Leaf Composite" />
  </role>

</pattern>
